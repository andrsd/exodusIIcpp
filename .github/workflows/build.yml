name: build

env:
  SEACAS_VERSION: 2022-08-01

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.compiler }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gnu
          - os: macos-11
            compiler: clang
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          path: main

      - name: Install dependencies (linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -qq
          sudo apt install \
            lcov \
            libfmt-dev \
            libnetcdf-dev \
            libhdf5-dev \
            libexodusii-dev
          echo "CODE_COVERAGE=YES" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install \
            lcov \
            fmt \
            netcdf \
            hdf5
          echo "CODE_COVERAGE=NO" >> $GITHUB_ENV

      - name: Build exodusII
        if: startsWith(matrix.os, 'macos')
        run: |
          cd ${{ github.workspace }}
          echo "::group::download"
          wget -q https://github.com/sandialabs/seacas/archive/v${SEACAS_VERSION}.tar.gz
          tar -xzf v${SEACAS_VERSION}.tar.gz
          echo "::endgroup::"
          cd seacas-${SEACAS_VERSION}
          echo "::group::configure"
          export ACCESS=${{ github.workspace }}/seacas-${SEACAS_VERSION}
          export INSTALL_PATH=/usr/local
          export SHARED=YES
          export MPI=NO
          export COMPILER=${{ matrix.compiler }}
          export FC=gfortran-11
          ./cmake-exodus \
            -DSeacas_ENABLE_TESTS=NO \
            -B build -S
          echo "::endgroup::"
          echo "::group::make install"
          sudo make -C ${{ github.workspace }}/seacas-${SEACAS_VERSION}/build install
          echo "::endgroup::"

      - name: Configure
        run: |
          cmake -S main -B ${{ github.workspace }}/main/build \
            -DEXODUSIICPP_BUILD_TESTS=YES \
            -DEXODUSIICPP_CODE_COVERAGE=$CODE_COVERAGE

      - name: Build
        run: make -C ${{ github.workspace }}/main/build

      - name: Run tests
        run: |
          echo "### Test results" >> $GITHUB_STEP_SUMMARY
          ctest --test-dir ${{ github.workspace }}/main/build -V -O test.log
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat test.log >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload test result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}
          path: ${{ github.workspace }}/main/build/Testing/Temporary/LastTest.log

      - name: Generate code coverage
        if: startsWith(matrix.os, 'ubuntu')
        run: make -C ${{ github.workspace }}/main/build coverage

      - name: Upload coverage artifact
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.compiler }}
          path: ${{ github.workspace }}/main/build/coverage.info

  upload-to-codecov:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Upload to Codecov
        uses: codecov/codecov-action@v2

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: 'coverage-ubuntu-22.04-gnu/coverage.info'
